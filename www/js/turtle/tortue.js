// Generated by CoffeeScript 2.3.0
var SVG, Tortue, axeX, axeY, axes, dessineCercle, dessineSegment, dessineTexte, effaceDessin, garderobe, grille;
var totos = {}, toto = 1;

SVG = function(tag) {
  return document.createElementNS('http://www.w3.org/2000/svg', tag);
};

garderobe = '<path style="fill:#9DD7F5;" d="M169.1,2.625c-22.092,0-40,17.909-40,40v40c0,22.091,17.908,40,40,40s40-17.909,40-40v-40C209.1,20.534,191.191,2.625,169.1,2.625z"/><path style="fill:#78B9EB;" d="M209.1,82.625c0,22.091-17.908,40-40,40l0,0c0-39,0-80,0-120l0,0c22.092,0,40,17.909,40,40V82.625z"/><path style="fill:#9DD7F5;" d="M109.199,122.625H60c-33.138,0-60,26.863-60,60h109.199V122.625z"/><path style="fill:#9DD7F5;" d="M111.895,212.625l-30.369,38.708c-20.454,26.071-15.9,63.787,10.17,84.241L159.1,249.66L111.895,212.625z"/><path style="fill:#78B9EB;" d="M226.305,212.625l30.369,38.708c20.454,26.071,15.9,63.787-10.17,84.241L179.1,249.661L226.305,212.625z"/><path style="fill:#78B9EB;" d="M229,122.625h49.199c33.138,0,60,26.863,60,60H229V122.625z"/><path style="fill:#FF9811;" d="M169.139,182.625l70.541-97.08c-19.802-14.412-44.176-22.922-70.541-22.922s-50.739,8.51-70.54,22.922L169.139,182.625z"/><path style="fill:#FF5023;" d="M169.139,182.625l70.541-97.08c-19.802-14.412-44.176-22.922-70.541-22.922C169.139,102.625,169.139,182.625,169.139,182.625z"/><path style="fill:#FF5023;" d="M169.139,182.625L98.607,85.538c-19.826,14.377-35.451,34.93-43.598,60.004c-8.146,25.075-7.586,50.886,0.002,74.171L169.139,182.625z"/><path style="fill:#FF9811;" d="M169.139,182.65v-0.025l-0.039,0.013l-0.039-0.013v0.025L55.01,219.702c7.547,23.297,22.265,44.51,43.594,60.006c21.304,15.478,45.989,22.92,70.45,22.918v0.001c0.016,0,0.03-0.001,0.046-0.001s0.03,0.001,0.046,0.001v-0.001c24.461,0.002,49.147-7.44,70.45-22.918c21.329-15.496,36.047-36.709,43.594-60.006L169.139,182.65z"/><path style="fill:#D80027;" d="M169.139,182.625l-0.006,120.001c24.489,0.021,49.212-7.421,70.541-22.918c21.331-15.497,36.047-36.709,43.597-60.007L169.139,182.625z"/><path style="fill:#E02812;" d="M169.139,182.625l114.127,37.089c7.588-23.286,8.148-49.098,0-74.171c-8.146-25.076-23.77-45.626-43.597-60.006L169.139,182.625z"/><polygon style="fill:#FFDA44;" points="207.346,130.06 230.957,202.734 169.139,247.648 107.319,202.734 130.933,130.06"/><polygon style="fill:#FF9811;" points="207.346,130.06 230.957,202.734 169.139,247.648 169.1,130.06"/>'

effaceDessin = function() {
  var dessin = $('#leSVG');
  return dessin.empty().append($($.parseXML(totos[1].svg)).find("#1"));
};

dessineSegment = function(x1, y1, x2, y2, couleur, dim) {
  var dessin;
  if (x1 === null) {
    x1 = 0;
  }
  if (y1 === null) {
    y1 = 0;
  }
  if (x2 === null) {
    x2 = 1;
  }
  if (y2 === null) {
    y2 = 1;
  }
  if (couleur === null) {
    couleur = 'black';
  }
  if (dim === null) {
    dim = 1;
  }
  dessin = $('#leSVG');
  return $(SVG('line')).attr('x1', x1).attr('y1', y1).attr('x2', x2).attr('y2', y2).attr('stroke', couleur).attr('stroke-width', dim).appendTo(dessin);
};

dessineTexte = function(texte, x, y, couleur) {
  var dessin;
  dessin = void 0;
  if (x === null) {
    x = 20;
  }
  if (y === null) {
    y = 20;
  }
  if (couleur === null) {
    couleur = 'gray';
  }
  dessin = $('#leSVG');
  return $(SVG('text')).attr('x', x).attr('y', y).attr('fill', couleur).text(texte).appendTo(dessin);
};

dessineCercle = function(cx, cy, r, couleur) {
  var dessin = void 0;
  couleur = "black";
  if (cx === null) {
    cx = 0;
  }
  if (cy === null) {
    cy = 0;
  }
  if (r === null) {
    r = 4;
  }
  dessin = $('#leSVG');
  return $(SVG('circle')).attr('cx', cx).attr('cy', cy).attr('r', r).attr('fill', couleur).attr('fill-opacity', 0.4).attr('stroke', couleur).attr('stroke-width', 1).appendTo(dessin);
};

axeX = function() {
  var results, x;
  dessineSegment(20, 320, 620, 320, 'gray');
  dessineSegment(620, 320, 600, 314, 'gray');
  dessineSegment(620, 320, 600, 326, 'gray');
  x = -300;
  results = [];
  while (x < 300) {
    if (Math.abs(x) % 50 > 0) {
      dessineSegment(320 + x, 322, 320 + x, 318, 'gray');
    } else {
      if (Math.abs(x) % 100 > 0) {
        dessineSegment(320 + x, 324, 320 + x, 316, 'gray');
      } else {
        dessineSegment(320 + x, 325, 320 + x, 315, 'gray');
        dessineTexte(x, 320 + x, 340);
      }
    }
    results.push(x += 10);
  }
  return results;
};

axeY = function() {
  var results, y;
  dessineSegment(320, 620, 320, 20, 'gray');
  dessineSegment(320, 20, 314, 40, 'gray');
  dessineSegment(320, 20, 326, 40, 'gray');
  y = -300;
  results = [];
  while (y < 300) {
    if (Math.abs(y) % 50 > 0) {
      dessineSegment(318, 320 - y, 322, 320 - y, 'gray');
    } else {
      if (Math.abs(y) % 100 > 0) {
        dessineSegment(316, 320 - y, 324, 320 - y, 'gray');
      } else {
        dessineSegment(315, 320 - y, 325, 320 - y, 'gray');
        dessineTexte(y, 322, 320 - y);
      }
    }
    results.push(y += 10);
  }
  return results;
};

grille = function() {
  var results, x, y;
  x = -300;
  while (x <= 300) {
    if (Math.abs(x) % 50 > 0) {
      dessineSegment(320 + x, 20, 320 + x, 620, 'yellow');
    } else {
      dessineSegment(320 + x, 20, 320 + x, 620, 'orange');
    }
    x += 10;
  }
  y = -300;
  results = [];
  while (y <= 300) {
    if (Math.abs(y) % 50 > 0) {
      dessineSegment(20, 320 - y, 620, 320 - y, 'yellow');
    } else {
      dessineSegment(20, 320 - y, 620, 320 - y, 'orange');
    }
    results.push(y += 10);
  }
  return results;
};

axes = function() {
  axeX();
  return axeY();
};

Tortue = class Tortue {
  constructor(id) {
    var $dessin;
    this.id = id;
    this.x = 320;
    this.y = 320;
    this.t = 0; //angle
    this.c = '#FF0000';
	this.size = 1;
    this.stylo = true;
    this.costumeId = 0;
    this.svg = `<svg xmlns='http://www.w3.org/2000/svg' version='1.1'> \n <g id='${this.id}' transform='translate(300 300) rotate(90 20 20) scale(0.1)' width='40' height='40'> \n ${garderobe} \n </g> \n </svg>`;
    $dessin = $('#leSVG');
    if ($dessin.find(`#${this.id}`).length === 0) $dessin.append($($.parseXML(this.svg)).find(`#${this.id}`));
  }

  toto_update() {
    return $(`#${this.id}`).attr("transform", `translate(${this.x-20} ${this.y-20}) rotate(${(this.t * 180 / Math.PI)+90} 20 20) scale(0.1)`);
  }

  svg_update() {
    var $svg;
    this.svg = garderobe;
    $svg = `<svg xmlns='http://www.w3.org/2000/svg' version='1.1'>\n <g id='toto' transform='translate(300 300) rotate(90 20 20) scale(0.1)' width='40' height='40'>\n ${this.svg} \n </g> \n </svg>`;
    return $(`#${this.id}`).empty().append($($.parseXML($svg)).find("#toto").contents());
  }

  penup() {
    return this.stylo = false;
  }

  pendown() {
    return this.stylo = true;
  }

  show() {
    return $('#' + this.id).show();
  }

  hide() {
    return $('#' + this.id).hide();
  }

  couleur(coul) {
    return this.c = coul;
  }

  taille(dim) {
    return this.size = dim;
  }

  tg1(a) {
	if (a == undefined) {
		$('#message').modal('show')
		return
	}
    this.t -= a / 180 * Math.PI;
    this.toto_update();
  }

  tg(a) {
    return this.tg1(a);
  }

  td1(a) {
	if (a == undefined) {
		$('#message').modal('show')
		return
	}
    this.t += a / 180 * Math.PI;
    this.toto_update();
  }

  td(a) {
      return this.td1(a);
  }

  orient(a) {
    this.t = a / 180 * Math.PI;
    return this.toto_update();
  }

  write(texte) {
    return dessineTexte(texte, this.x, this.y, this.c);
  }

  cercle() {
    return dessineCercle(this.x, this.y, 4, this.c);
  }

  teleport(x, y) {
    [this.x, this.y] = [x, y];
    return this.toto_update();
  }

  av1(d) {
	if (d == undefined) {
		$('#message').modal('show')
		return
	}
    var oldx, oldy;
      oldx = void 0;
      oldy = void 0;
      oldx = this.x;
      oldy = this.y;
      this.x += d * Math.cos(this.t);
      this.y += d * Math.sin(this.t);
      if (this.stylo) {
        dessineSegment(oldx, oldy, this.x, this.y, this.c, this.size);
      }
      this.toto_update();
  }

  av(d) {
      return this.av1(d);
  }

  re1(d) {
	if (a == undefined) {
		$('#message').modal('show')
		return
	}
    var oldx, oldy;
      oldx = void 0;
      oldy = void 0;
      oldx = this.x;
      oldy = this.y;
      this.x -= d * Math.cos(this.t);
      this.y -= d * Math.sin(this.t);
      if (this.stylo) {
        dessineSegment(oldx, oldy, this.x, this.y, this.c, this.size);
      }
      this.toto_update();
  }

  re(d) {
      return this.re1(d);
  }

  distance(autre) {
    var d;
    d = Math.sqrt(Math.pow(autre.x - this.x, 2) + Math.pow(autre.y - this.y, 2));
    return d;
  }

  azimuth(autre) {
    var a;
    a = Math.atan2(autre.y - this.y, autre.x - this.x);
    this.t = a;
    return this.toto_update();
  }

  avatar(nb) {
    this.costumeId = nb;
    return this.svg_update();
  }

};

$(function() {
  return totos[toto] = new Tortue(toto);
});