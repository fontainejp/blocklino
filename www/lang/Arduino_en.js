'use strict';
goog.provide ( 'Blockly.Msg.fr');
goog.require ( 'Blockly.Msg');

// common to all blocks
Blockly.Msg.HELPURL = "http://www.mon-club-elec.fr/pmwiki_reference_arduino/pmwiki.php?n=Main.ReferenceMaxi"; // do not translate
Blockly.Msg.pin = "on pin";
Blockly.Msg._AT = "at";
Blockly.Msg.AV = "forward";
Blockly.Msg.AR = "rear";
Blockly.Msg.high = "HIGH"; // do not translate
Blockly.Msg.low = "LOW"; // do not translate
Blockly.Msg.right = "right";
Blockly.Msg.left = "left";
Blockly.Msg.LetR = "right & left";
Blockly.Msg.direction = "direction";
Blockly.Msg.vitesse = "speed ";
// oled
Blockly.Msg.oled = "OLED display";
Blockly.Msg.oled_aff = "show on OLED display";
Blockly.Msg.oled_glyph = "draw icon";
Blockly.Msg.oled_clear = "clear text";
Blockly.Msg.oled_clearBuffer = "clear screen";
Blockly.Msg.oled_sendBuffer = "show on screen";
Blockly.Msg.oled_box = "draw rectangle";
Blockly.Msg.oled_circle = "draw circle";
Blockly.Msg.oled_line = "draw line";
Blockly.Msg.oled_bitmap = "draw  pixels";
Blockly.Msg.oled_xy = "(x , y)";
Blockly.Msg.oled_xy_tooltip ="Coordinates : (column , line)";
Blockly.Msg.oled_largeur = "width";
Blockly.Msg.oled_hauteur = "height";
Blockly.Msg.oled_full = "fill";
Blockly.Msg.oled_centre = "center";
Blockly.Msg.oled_rayon = "radius";
Blockly.Msg.oled_point1 = "pointA";
Blockly.Msg.oled_point2 = "pointB";
Blockly.Msg.oled_font = "police OLED";
Blockly.Msg.oled_ligne=[["1","0"],["2","1"],["3","2"],["4","3"],["5","4"],["6","5"],["7","6"],["8","7"]];
Blockly.Msg.oled_orientation = [["0°", "0"],["180°", "1"]];
Blockly.Msg.oled_police = [["8px", "u8x8_font_chroma48medium8_r"],["10px", "u8x8_font_torussansbold8_r"],["16px", "u8x8_font_px437wyse700b_2x2_r"],["24px", "u8x8_font_profont29_2x3_r"]];
Blockly.Msg.oled_icon = [["x1", "1x_t"],["x2", "2x_t"],["x4", "4x_t"]];
Blockly.Msg.oled_mode = [["text", "t"],["graphic", "g"]];
Blockly.Msg.oled_tooltip = "OLED display I2C,\nit's a 0.96 inch monochrome(white) 128x64 pixels passive display matrix module\nDisplay <-> Arduino \nSDA <--------> A4 \nSCL <- -------> A5";
//midi
Blockly.Msg.midi_init = "MIDI controler ";
Blockly.Msg.midi_vitesse = "velocity";
Blockly.Msg.midi_play = "play note";
Blockly.Msg.midi_stop = "stop note";
Blockly.Msg.instrument = "instrument";
Blockly.Msg.midi_play_percu = "play drum kit";
Blockly.Msg.midi_stop_percu = "stop drum kit";
//Wireless
Blockly.Msg.esp8266_init_tooltip = "initialization of the wifi module and connection with the indicated parameters";
Blockly.Msg.esp8266_1 = "Esp 8266";
Blockly.Msg.esp8266_2 = "SSID";
Blockly.Msg.esp8266_3 = "key";
Blockly.Msg.esp8266_4 = "IP";
Blockly.Msg.esp8266_5 = "gateway";
Blockly.Msg.esp8266_6 = "mask";
Blockly.Msg.esp8266_7 = [["client", "client"], ["server", "server"]];
Blockly.Msg.esp8266_8 = "port";
Blockly.Msg.esp8266_9 = [["dynamic", "dynamic"], ["static", "static"]];
Blockly.Msg.esp8266_10 = "address";
Blockly.Msg.esp8266_recept_tooltip = "reception";
Blockly.Msg.esp8266_url = "http://julien.coron.free.fr/?p=928";
Blockly.Msg.esp8266_html_tooltip = "";
Blockly.Msg.esp8266_send_html_tooltip = "";
Blockly.Msg.esp8266_send_html = "send HTML page";
Blockly.Msg.esp8266_start_tooltip = "";
Blockly.Msg.esp8266_start = "start server";
Blockly.Msg.esp8266_request_tooltip = "";
Blockly.Msg.esp8266_request = "if in the query we find";
Blockly.Msg.esp8266_request_container = "we find";
//INTERRUPTION
Blockly.Msg.LKL_ATTACHINTERRUPT_PIN = 'Interrupt: when a';
Blockly.Msg.LKL_DETACHINTERRUPT_PIN = "disable interrupt on pin";
Blockly.Msg.LKL_TOOLTIP_INOUT_ATTACHINTERRUPT = "Specifies an action to take when an external interrupt (4 possible modes) occurs on pin 2 or 3";
Blockly.Msg.LKL_TOOLTIP_INOUT_DETACHINTERRUPT = "Disable the previously specified external interrupt";
Blockly.Msg.LKL_MODE = 'is detected on the pin';
// FIELDDROPDOWN
Blockly.Msg.axe=[["x", "X"], ["y", "Y"], ["z", "Z"]];
Blockly.Msg.instru=[["piano", "0"],["organ", "19"],["bass", "32"],["synthesizer", "81"],["guitar", "24"],["violin", "40"],["clarinet", "71"],["trumpet", "56"]];
Blockly.Msg.percu=[["Bass Drum", "36"],["Snare Drum", "38"],["Low Floor Tom", "43"],["Low Mid Tom", "47"],["High Tom", "50"],["Crash Cymbal", "49"],["Ride Cymbal", "51"]];
Blockly.Msg.midi=[["C\u2083","48"],["C#\u2083","49"],["D\u2083","50"],["D#\u2083","51"],["E\u2083","52"],["F\u2083","53"],["F#\u2083","54"],["G\u2083","55"],["G#\u2083","56"],["A\u2083","57"],["A#\u2083","58"],["B\u2083","59"],["C\u2084","60"],["C#\u2084","61"],["D\u2084","62"],["D#\u2084","63"],["E\u2084","64"],["F\u2084","65"],["F#\u2084","66"],["G\u2084","67"],["G#\u2084","68"],["A\u2084","69"],["A#\u2084","70"],["B\u2084","71"],["C\u2085","72"],["C#\u2085","73"],["D\u2085","74"],["D#\u2085","75"],["E\u2085","76"],["F\u2085","77"],["F#\u2085","78"],["G\u2085","79"],["G\u2085","80"],["A\u2085","81"],["A#\u2085","82"],["B\u2085","83"]];
Blockly.Msg.note = [[ "C\u2084", "261"], [ "D\u2084", "293"], [ "E\u2084", "329"], [ "F\u2084", "349"], [ "G\u2084", "392"], [ "A\u2084", "440"], [ "B\u2084", "493"], [ "C\u2085", "523 "], ["D\u2085 "," 587 "], ["E\u2085 "," 659 "], ["F\u2085 "," 698 "], ["G\u2085 "," 784 "], [ "A\u2085", "880"]];
Blockly.Msg.tempo = [["1", "125"], ["2", "250"], ["4", "500"], ["8", "1000"], ["16", "2000"]];
Blockly.Msg.on_off = [["on", "LOW"], ["off", "HIGH"]];
Blockly.Msg.menublink = [["slowly", "1000"], ["fast", "100"]];
Blockly.Msg.AV_AR = [[Blockly.Msg.AV, "FORWARD"], [Blockly.Msg.AR, "BACKWARD"]]; // do not translate
Blockly.Msg.times = [["seconds", "s"], ["milliseconds", "m"], ["microseconds", "u"]];
Blockly.Msg.time = [["seconds", "s"], ["milliseconds", "m"]];
Blockly.Msg.char_lcd = [[ "# 1", "1"], [ "# 2", "2"], [ "3", "3"], [ "# 4", "4"], [ "# 5", "5"], [ "# 6", "6"], [ "No. 7", "7"], [ "# 8", "8 "]];
Blockly.Msg.rxtx = [[ "2", "2"], [ "3", "3"], [ "4", "4"], [ "5", "5"], [ "6 "," 6 "], [" 7 "," 7 "], [" 8 "," 8 "], [" 9 "," 9 "], [" 10 "," 10 "], [" 11 "," 11 "], [" 12 "," 12 "], [" 13 "," 13 "]];
Blockly.Msg.FIELDDROPDOWN = [["1(high state)", Blockly.Msg.high], ["0(low state)", Blockly.Msg.low]];
Blockly.Msg.FIELDDROPDOWN_0_1 = [["UP", Blockly.Msg.high], ["DOWN", Blockly.Msg.low]];
Blockly.Msg.ligne = [["1", "0"], ["2", "1"]];
Blockly.Msg.colonne = [[ "1", "0"], [ "2", "1"], [ "3", "2"], [ "4", "3"], [ "5 "," 4 "], [" 6 "," 5 "], [" 7 "," 6 "], [" 8 "," 7 "], [" 9 "," 8 "], [" 10 "," 9 "], [" 11 "," 10 "], [" 12 "," 11 "], [" 13 "," 12 "], [" 14 "," 13 "], [" 15 "," 14 "], [" 16 "," 15 "]];
Blockly.Msg.FIELDDROPDOWN_ONOFF = [["turn on", Blockly.Msg.high], ["turn off", Blockly.Msg.low]];
Blockly.Msg.FIELDDROPDOWN_ONOFF_matrice = [["1", "true"], ["0", "false"]];
Blockly.Msg.FIELDDROPDOWN_av_ar = [[Blockly.Msg.AV, Blockly.Msg.high], [Blockly.Msg.AR, Blockly.Msg.low]];
Blockly.Msg.LKL_DROPDOWN = [['rising edge', 'RISING'], ['falling edge', 'FALLING'], ['changing state', 'CHANGE'], ['low state', Blockly. Msg.low]];
Blockly.Msg.irq = [['rising edge', 'Pin.IRQ_RISING'], ['falling edge', 'Pin.IRQ_FALLING'], ['high state', 'Pin.IRQ_HIGH_LEVEL'], ["low state "," Pin.IRQ_LOW_LEVEL "]];
Blockly.Msg.menudht = [["humidity", "h"], ["temperature", "t"]];
Blockly.Msg.couleur = [["blue", "blue"], ["yellow", "yellow"], ["red", "red"], ["green", "green"]];
Blockly.Msg.sens = [["forward", "a"], ["turn right", "d"], ["turn left", "g"]];
//sensor
Blockly.Msg.sound_sensor="noise on the pin";
Blockly.Msg.sound_sensor_tooltip="returns the sound intensity (from 0 to 1023)"
Blockly.Msg.MMA7660="accelerometer";
Blockly.Msg.MMA7660_tooltip="lis3dhtr :\ninitialize accelerometer\n Sensor <--> Arduino\nSDA <--------> A4\nSCL <--------> A5";
Blockly.Msg.MMA7660_get="accelerometer on";
Blockly.Msg.MMA7660_get_tooltip="returns the acceleration";
Blockly.Msg.VL53L0X="laser sensor";
Blockly.Msg.VL53L0X_tooltip="VL53L0X :\n initialize sensor.\nDétecteur <--> Arduino\nSDA <--------> A4\nSCL <--------> A5";
Blockly.Msg.VL53L0X_distance="distance measured by laser";
Blockly.Msg.VL53L0X_distance_tooltip="VL530X :\n returns distance in mm";
Blockly.Msg.bme280="Air Pressure Sensor";
Blockly.Msg.bmp280="Air Pressure Sensor";
Blockly.Msg.bme280_tooltip="BME280 :\n initialize sensor.\n sensor <--> Arduino\nSDA <--------> A4\nSCL <--------> A5";
Blockly.Msg.bmp280_tooltip="BMP280 :\n initialize sensor.\n sensor <--> Arduino\nSDA <--------> A4\nSCL <--------> A5";
Blockly.Msg.bme280_pressure="Air Pressure";
Blockly.Msg.bmp280_pressure="Air Pressure";
Blockly.Msg.bme280_pressure_tooltip="returns Air Pressure in hPa";
Blockly.Msg.bmp280_pressure_tooltip="returns Air Pressure in Pa";
Blockly.Msg.inter="switch is";
Blockly.Msg.inter_tooltip="returns true (false) if the switch is (is not) at the indicated position";
Blockly.Msg.mc005="presence detected on the pin";
Blockly.Msg.mc005_tooltip="MC005:\n returns true (false) if a presence is (is not) detected";
Blockly.Msg.bp = "button pressed on the pin";
Blockly.Msg.bp_tooltip = "returns true (false) if a pushbutton is (is not) pressed";
Blockly.Msg.dht11_tooltip="DHT11 :\n returns the humidity of the air (from 20 to 80%) or \n the temperature (from 2 to 50°C)";
Blockly.Msg.dht22_tooltip = "DHT22: \n returns the humidity of the air (from 0 to 100%) or \n the temperature (from -40 to 80°C)";
Blockly.Msg.suiveur_ligne = "black line detected on the pin";
Blockly.Msg.suiveur_ligne_tooltip = "CAP227: \n returns true (false) if a black line is (is not) detected";
Blockly.Msg.light = "brightness on the pin";
Blockly.Msg.light_tooltip = "returns a value depending on the brightness \n 0: darkness \n255: full light";
Blockly.Msg.hum = "soil moisture on the pin";
Blockly.Msg.hum_tooltip = "CAP 615: \n returns soil moisture from 0 to 100%";
Blockly.Msg.light_tooltip = "returns a value depending on the brightness \n 0: darkness \n255: full light";
Blockly.Msg.grove_ldr = "brightness on the pin";
Blockly.Msg.grove_ldr_tooltip = "returns the measured brightness \n 0: no light \n 100: very intense light";
Blockly.Msg.potar = "cursor position on the pin";
Blockly.Msg.potar_tooltip = "returns a value based on the cursor position \n0: cursor left \n255: cursor right";
Blockly.Msg.lm35 = "temperature on the pin";
Blockly.Msg.lm35_tooltip = "LM35: \n returns the measured temperature in degrees celcius (from 0 to 80°C)";
Blockly.Msg.ultrason_1 = "distance < limit";
Blockly.Msg.ultrason_2 = "returns a High state if the measured distance is less than the limit";
Blockly.Msg.ultrason_distance1 = "distance measured by ultrasound";
Blockly.Msg.ultrason_tooltip = "HC-SR04: \n Sound sensor that allows to make distance measurements (of 3 cm and 4 m) \nindicate the pins of the Arduino to which will be connected TRIG and ECHO";
Blockly.Msg.ultrason = "ultrasonic detector";
Blockly.Msg.ultrason_distance2 = "HC-SR04: \n returns the distance measured in cm by the ultrasonic detector";
Blockly.Msg.ultrason_helpurl = "https://www.carnetdumaker.net/articles/mesurer-une-distance-avec-un-capteur-ultrason-hc-sr04-et-une-carte-arduino-genuino/"; // do not translate
Blockly.Msg.pir = "motion detected ";
Blockly.Msg.feu = "flame detected ";
Blockly.Msg.presence = "obstacle detected ";
Blockly.Msg.appui = "contact detected ";
Blockly.Msg.pir_tooltip = "HC-SR501: \n returns true (false) if a presence is (is not) detected";
Blockly.Msg.feu_tooltip = "CAP168: \n returns true (false) if a flame is (is not) detected";
Blockly.Msg.presence_tooltip = "CAP711: \n returns true (false) if a contact has (did not) take place";
Blockly.Msg.appui_tooltip = "CAP831: \n returns true (false) if a support is (is not) detected";
Blockly.Msg.CAP661="pulses on pin";
Blockly.Msg.CAP661_TOOLTIP="returns the number of slots (full + hollow) of the encoder wheel";
// bluetooth
Blockly.Msg.bluetooth1 = "if the data received by bluetooth";
Blockly.Msg.bluetooth1_tooltip = "bluetooth data reception \nconnecting module HC-06 to pins 0 and 1 \net cross Rx and Tx pins";
Blockly.Msg.bluetooth2 = "send by bluetooth";
Blockly.Msg.bluetooth2_tooltip = "sends byte (write) via bluetooth \nconnecting module HC-06 to pins 0 and 1 \net cross pins Rx and Tx";
Blockly.Msg.bluetooth_print= "send data by bluetooth";
Blockly.Msg.bluetooth_print_tooltip= "sends data (print) via bluetooth\nconnecting module HC-06 to pins 0 and 1 \net cross pins Rx and Tx";
Blockly.Msg.bluetooth_init_tooltip = "";
Blockly.Msg.bluetooth_helpurl = "http://tiptopboards.free.fr/arduino_forum/viewtopic.php?f=2&t=57&sid=cedb66db91596dd8926d167142dbf307"; // do not translate
//LCD screen
Blockly.Msg.lcd_change_color="change colour";
Blockly.Msg.lcd_fond = "colour";
Blockly.Msg.LCD = "LCD screen";
Blockly.Msg.LCDi2c_tooltip = "initializes the 2-line, 16-character I2C LCD with RGB backlight. \n Displayer <-> Arduino \nSDA <--------> A4 \nSCL <- -------> A5 ";
Blockly.Msg.LCD_tooltip = "initializes the LCD, 2 lines and 16 characters, indicating the pins to connect";
Blockly.Msg.LCD_SHIELD_PRINT_HELPURL = "http://electroniqueamateur.blogspot.fr/2017/01/utiliser-un-displayer-lcd-2-x-16-with.html";
Blockly.Msg.LCD_SHIELD_PRINT_TEXT = "show on LCD";
Blockly.Msg.LCD_SHIELD_PRINT_TEXT_tooltip = "display the text in the specified location";
Blockly.Msg.LCD_SHIELD_PRINT_TOOLTIP = "write the text (s) on the LCD screen";
Blockly.Msg.LCD_SHIELD_PRINT_INPUT1 = "line 1";
Blockly.Msg.LCD_SHIELD_PRINT_INPUT2 = "line 2";
Blockly.Msg.LCD_line = "line";
Blockly.Msg.LCD_col = "column";
Blockly.Msg.LCD_raz = "erase the LCD screen";
Blockly.Msg.LCD_raz_tooltip = "clear screen";
Blockly.Msg.lcd_aff_symbole = "display the symbol";
Blockly.Msg.lcd_aff_symbole_tooltip = "show the symbol that has been declared before";
Blockly.Msg.lcd_symbole = "declare the symbol";
Blockly.Msg.lcd_symbole_tooltip = "definition of a character for the LCD: \n 0 turns off a pixel \n 1 lights a pixel";
// structure
Blockly.Msg.loop = "Loop";
Blockly.Msg.init = "Setup";
Blockly.Msg.base_setup_loop = "The initialization function: \nIt is used to initialize the variables, the direction of the pins ... \nIt is executed only once \nThe loop function: \nThis is the main part of the program, all the blocks placed here will run in loop and indefinitely (several thousand times per second) ";
Blockly.Msg.loop_tooltip = "all blocks placed here will run in a loop and indefinitely (several thousand times per second)";
Blockly.Msg.begin_tooltip = "this block is used to define the order in which the program should execute";
Blockly.Msg.begin = "START of the program";
Blockly.Msg.def = "Declaration";
Blockly.Msg.def_tooltip = "all the blocks placed here will only be executed once, this is where the different sensors or actuators are configured";
Blockly.Msg.END = "END of program";
Blockly.Msg.END_tooltip = "Stop the program, blocks placed afterwards will be ignored";
Blockly.Msg.code_tooltip = "Type an instruction here that is not in blocks";
//matrix
Blockly.Msg.matriceLC = "put the LED, line";
Blockly.Msg.matrice_create_aff = "Create block 'display symbol %1'";
Blockly.Msg.matrice_create_symbole = "Create the block 'set the symbol %1'";
Blockly.Msg.matrice = "matrix";
Blockly.Msg.matrice8x8_tooltip = "Initialisation of the matrix to 64 LEDs, it is necessary to indicate the pins of the arduino to which will be connected DIN, CLK, CS";
Blockly.Msg.matrice8x8_symbole = "declare the symbol";
Blockly.Msg.matrice8x8_symbole_tooltip = "definition of a symbol for the matrix: \n 0 turn off an LED \n 1 turn on an LED";
Blockly.Msg.matrice8x8_efface = "erase the matrix";
Blockly.Msg.matrice8x8_aff = "display the symbol";
Blockly.Msg.matrice8x8_binaire_tooltip = "1 turns on an LED of the matrix and 0 turns it off";
Blockly.Msg.matrice8x8_del_tooltip = "Turns on (off) an LED in the array indicating its coordinates \nCaution dialing starts at 0";
Blockly.Msg.matrice8x8_aff_tooltip = "Display the symbol that has been previously defined";
Blockly.Msg.matrice8x8_efface_tooltip = "Turn off all LEDs in the matrix";
Blockly.Msg.matrice8x8_helpurl = "http://tiptopboards.free.fr/arduino_forum/viewtopic.php?t=6&p=6";
Blockly.Msg.matrice16x8_tooltip = "Initialization of the array to 128 LEDs. \nMatrix <-> Arduino \nSDA <--------> A4 \nSCL <--------> A5";
Blockly.Msg.matrice16x8_symbole = "declare the symbol";
Blockly.Msg.matrice16x8_symbole_tooltip = "definition of a symbol for the matrix: \n 0 turns off an LED \n 1 turns on an LED";
Blockly.Msg.matrice16x8_efface = "turn off the LEDs of the matrix";
Blockly.Msg.matrice16x8_aff = "display the symbol";
Blockly.Msg.matrice16x8_binaire_tooltip = "1 turns on an LED of the matrix and 0 turns it off";
Blockly.Msg.matrice16x8_del_tooltip = "Turns on (off) an LED in the matrix indicating its coordinates \nCaution dialing starts at 0";
Blockly.Msg.matrice16x8_aff_tooltip = "Display the symbol that has been previously defined";
Blockly.Msg.matrice16x8_efface_tooltip = "Turn off all LEDs in the matrix";
Blockly.Msg.matrice16x8_helpurl = "";
Blockly.Msg.matrice8x8_scroll_tooltip="scroll the text on the matrix";
Blockly.Msg.matrice8x8_scroll="scroll the text";
//time
Blockly.Msg.millis0 ="time elapsed in";
Blockly.Msg.millis1 = "duration in";
Blockly.Msg.millis2 = "from the beginning";
Blockly.Msg.millis_tooltip="returns the time elapsed since program is started";
Blockly.Msg.millis_start="start a timekeeping in";
Blockly.Msg.millis_start_tooltip="starts timing from the moment the block is positioned";
Blockly.Msg.chrono_tooltip="returns the time since the stopwatch was started";
Blockly.Msg.ARDUINO_INOUT_Pulsein = "returns the duration in microseconds of a UP or DOWN pulse applied to a pin.If the parameter value is HIGH, the block waits for the pin to go HIGH, starts then the timing, waits for the pin to go back to the LOW level and then stop the timing ";
Blockly.Msg.ARDUINO_BASE_DELAY = "wait";
Blockly.Msg.ARDUINO_BASE_DELAY_TOOLTIP = "Specify the wait time in seconds, milliseconds or microseconds. \nThe program does nothing else during this time";
Blockly.Msg.ARDUINO_SINCE_PROGRAM_STARTED_TOOLTIP = "returns the duration in milliseconds, seconds or microseconds since the program started";
Blockly.Msg.ARDUINO_PULSEIN = "state duration";
Blockly.Msg.tempo_helpurl = "http://www.mon-club-elec.fr/pmwiki_reference_arduino/pmwiki.php?n=Main.ExempleBlinkWithoutDelay";
Blockly.Msg.tempo_tooltip = "This block checks if the indicated time has arrived, if it is the case then it executes the blocks placed inside .. Unlike the block 'to wait' this one is not blocking." ;
Blockly.Msg.tempo1 = "all";
// LED
Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_INPUT = "the LED of the card";
Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_TOOLTIP = "Turn off or turn on the LED on the Arduino board";
Blockly.Msg.blink = "flash the card LED";
Blockly.Msg.blink_tooltip = "The card LED flashes 1 or 10 times per second";
Blockly.Msg.del = "the LED connected to the pin";
Blockly.Msg.del_tooltip = "turns on (off) the LED connected to the indicated pin";
Blockly.Msg.bargraphe = "bargraph";
Blockly.Msg.bargraphe_allume="turn on LEDs to";
Blockly.Msg.bargraphe_number="turn on LED number";
Blockly.Msg.bargraphe_allume_tooltip="0 lights no LEDs \n2,5 lights up the first 2 LEDs and the 3rd half turns on \n10 turns on all LEDs";
Blockly.Msg.bargraphe_tooltip = "bargraph module composed of 10 LEDs (8 green, 1 yellow and 1 red), it is necessary to indicate the pins of the arduino on which will be connected DCKI and DI";
Blockly.Msg.rvb_init="LED rgb";
Blockly.Msg.rvb_init_tooltip="indicate the PWM pins to connect to the RGB LED";
Blockly.Msg.rvb_set="turn on rgb LED with";
Blockly.Msg.rvb_set_tooltip="displays a colour indicating a value for the three components (red, green, blue)";
Blockly.Msg.pixel1 = "RGB pixel";
Blockly.Msg.pixel2 = "update pixels";
Blockly.Msg.pixel3 = "with colour";
Blockly.Msg.pixel4 = "number";
Blockly.Msg.pixel5 = "set pixel brightness to";
Blockly.Msg.pixel6 = "set the pixel";
Blockly.Msg.pixel7 = "turn off pixels";
Blockly.Msg.pixel8="with random colour";
Blockly.Msg.pixel1_tooltip="neopixel RGB module indicate the pin to be connected and the number of pixels";
Blockly.Msg.pixel2_tooltip="show changes made";
Blockly.Msg.pixel3_tooltip="choose the pixel to light and its colour \nCaution the numbering starts at 0";
Blockly.Msg.pixel4_tooltip="turn off all the pixels";
Blockly.Msg.pixel5_tooltip="adjusts pixel brightness (from 0 to 255)";
Blockly.Msg.pixel6_tooltip="choose the pixel to light and its random colour\nCaution the numbering starts at 0";
// output
Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_INPUT1 = "put the DIGITAL pin";
Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_TOOLTIP = "write a 0 or 1 logical state to a specific output";
Blockly.Msg.toggle = "toggle the state of the pin";
Blockly.Msg.toggle_tooltip = "Toggle: \n write a logical state 0 if before there was a state 1 (and vice versa) on the specified output";
Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_INPUT1 = "put the PWM pin";
Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_TOOLTIP = "send a value between 0 and 255 on a specific output";
// input
Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_INPUT = "DIGITAL pin state";
Blockly.Msg.in_pullup = "Pull-Up";
Blockly.Msg.in_pullup_tooltip = "returns the logical state (0 or 1) of the indicated pin \nreturns 1 (high state) by default if pull-up enabled";
Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_TOOLTIP = "read logical state 0 or 1 of the digital pin";
Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_INPUT = "ANALOG pin value";
Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_TOOLTIP = "returns a value between 0 and 1023";
// audio
Blockly.Msg.play = "play";
Blockly.Msg.play_tooltip = "play the note";
Blockly.Msg.play_helpurl = "";
Blockly.Msg.beep = "beep on the pin";
Blockly.Msg.beep_TOOLTIP = "beeps (at 440Hz for 1s) on the selected pin";
Blockly.Msg.ARDUINO_TONE_INPUT1 = "emit a sound on the pin";
Blockly.Msg.ARDUINO_TONE_INPUT2 = "frequency (Hz)";
Blockly.Msg.ARDUINO_TONE_INPUT3 = "duration (ms)";
Blockly.Msg.ARDUINO_TONE_TOOLTIP = "emit a sound on the selected pin, at the desired frequency and for the desired duration";
Blockly.Msg.ARDUINO_NOTONE_INPUT = "stop the sound on the pin";
Blockly.Msg.ARDUINO_NOTONE_TOOLTIP = "stop the sound on the selected pin";
Blockly.Msg.lp2i_mp3_helpurl = "http://ouilogique.com/tests_DFPlayer/";
Blockly.Msg.lp2i_mp3_Volume = "volume [0-48]";
Blockly.Msg.lp2i_mp3_autoplay = "AutoPlay";
Blockly.Msg.lp2i_mp3 = "MP3 player";
Blockly.Msg.lp2i_mp3_tooltip = "DFPlayer Mini mp3: \ninitialization of the module, volume and operating mode \nModule MP3 <-> Arduino \nRx (2) <------------- -> Tx (1) ";
Blockly.Msg.lp2i_mp3_play = "play the mp3 file";
Blockly.Msg.lp2i_mp3_play_track_tooltip = "play the specified song";
Blockly.Msg.lp2i_mp3_play_tooltip = "plays the current song";
Blockly.Msg.lp2i_mp3_pause = "pause mp3 file";
Blockly.Msg.lp2i_mp3_pause_tooltip = "stop the current song";
Blockly.Msg.lp2i_mp3_prev = "read the previous mp3 file";
Blockly.Msg.lp2i_mp3_prev_tooltip = "play the previous track";
Blockly.Msg.lp2i_mp3_vol = "set the volume to";
Blockly.Msg.lp2i_mp3_vol_tooltip = "set the volume to the specified value [0-48]";
Blockly.Msg.lp2i_mp3_next = "read the following mp3 file";
Blockly.Msg.lp2i_mp3_next_tooltip = "plays the next song";
Blockly.Msg.lp2i_mp3_com="communication on Rx";
Blockly.Msg.GROVE_mp3_autoplay="mode";
Blockly.Msg.GROVE_mp3_play_pause="play/pause";
Blockly.Msg.GROVE_mp3_COM=[["D2","2,3"],["D3","3,4"],["D4","4,5"],["D5","5,6"],["D6","6,7"],["D7","7,8"],["D8","8,9"],["A0","A0,A1"],["A1","A1,A2"],["A2","A2,A3"],["A3","A3,A4"],["A6","A6,A7"]];
Blockly.Msg.GROVE_mp3_etat=[['playing','0x01'],['pause','0x03'],['stop','0x02']];
Blockly.Msg.GROVE_mp3_play=[['single no loop','SINGLE_SHOT'],['single loop','SINGLE_CYCLE'],['all loop','CYCLE'],['random','RANDOM']];
Blockly.Msg.GROVE_mp3_Volume="volume [0-32]";
Blockly.Msg.GROVE_mp3_PLAY_PAUSE="play/stop the current song";
Blockly.Msg.GROVE_mp3_playDIR_A="play the mp3 file";
Blockly.Msg.GROVE_mp3_playDIR_B="at directory";
// servomotor
Blockly.Msg.ARDUINO_SERVO_MOVE_INPUT1 = "orient the servomotor";
Blockly.Msg.ARDUINO_SERVO_MOVE_DEGREE = "angle [0-180]";
Blockly.Msg.ARDUINO_SERVO_MOVE_TOOLTIP = "possible rotation between 0 and 180 degrees";
Blockly.Msg.ARDUINO_SERVO_ROT_CONTINUE_TEXT = "actuate the servomotor continuously";
Blockly.Msg.ARDUINO_SERVO_ROT_CONTINUE_TOOLTIP = "Operate the servomotor connected to the specified pin, at the indicated speed and in the selected direction";
//engine
Blockly.Msg.mot_tooltip = "Shield motor controller L293D: \n activates both motors (M1 and M2) to advance or turn, the speed can be set between 0 and 90";
Blockly.Msg.mot_stop = "stop";
Blockly.Msg.mot_stop_tooltip = "L293D Motor Controller Shield: \nstop the two motors (M1 and M2)";
Blockly.Msg.moteur = "activate the engine";
Blockly.Msg.moteurstop = "stop the engine";
Blockly.Msg.moteur_tooltip = "starts the DC motor connected to the specified pin, at the indicated speed \nspeed = 0 -> motor stop";
Blockly.Msg.moteurdagu_tooltiprs040 = "RS 040 board: \n activates one of the 2 outputs to drive DC motors, the speed can be set between 0 and 90";
Blockly.Msg.moteurdagu_tooltiprs040stop = "RS 040 card: \nstop one of the 2 motors";
Blockly.Msg.moteurdagu_tooltiprs027 = "RS 027 board: \n operates one of the 2 outputs to drive DC motors, the speed can be set between 0 and 90";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR1 = "v1 - DC Motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR2 = "v2 - DC Motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_DIRECTION = "direction";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_VITESSE = Blockly.Msg.vitesse+"[0-255]";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_AVANT = "forward";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_ARRIERE = "rear";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_STOP = "stop";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_PAP1 = "v1 - Stepper Motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_PAP2 = "v2 - stepper motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_CONNECT = "pin";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_PPT = "not per turn";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_RPM = "speed (RPM)";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_NB_PAS = "number of steps";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTORDC1 = "DC 1 engine";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTORDC2 = "DC 2 engine";
Blockly.Msg.m_pap="step-by-step engine";
Blockly.Msg.m_pap_step="step";
Blockly.Msg.m_pap_step1="move forward";
Blockly.Msg.m_pap_tooltip = "Initialization of a stepping motor. \nIndicate number of steps, speed in rpm and pins to connect";
Blockly.Msg.m_pap_step_tooltip = "activates the stepping motor by the number of steps indicated, the following instruction will only be executed once the rotation of the motor is done";
// serial
Blockly.Msg.Serial_Writeln="new line";
Blockly.Msg.Serial_Init = "serial port on";
Blockly.Msg.Serial_Init_tooltip = "Set the communication rate in characters per second for serial communication";
Blockly.Msg.Serial_Write = "send to serial port";
Blockly.Msg.Serial_write_tooltip = "Send data to the serial port";
Blockly.Msg.Serial_read = "data read on the serial port";
Blockly.Msg.Serial_read_tooltip = "returns the first available data byte available in the serial port, or -1 if no data is available";
Blockly.Msg.Serial_available = "amount of data on the serial port";
Blockly.Msg.Serial_available_tooltip = "returns the number of bytes available in the serial port queue, or 0 if nothing is available";
Blockly.Msg.Serial_saut = "a line break";
Blockly.Msg.Serial_saut_tooltip = "returns a line break on the serial monitor";
Blockly.Msg.Serial_space = "a separator";
Blockly.Msg.Serial_space_tooltip = "return a space on the serial monitor";
Blockly.Msg.repl_read = "user entered command";
// software serial
Blockly.Msg.SSERIAL_Init = "software port on Rx";
Blockly.Msg.SSERIAL_tooltip = "Creating a new communication port using the specified pins and speed";
Blockly.Msg.SSERIAL_Read = "data read on the software port";
Blockly.Msg.SSERIAL_Read_tooltip = "returns the first byte of incoming data available in the software port, or -1 if no data is available";
Blockly.Msg.SSERIAL_Write = "send to the software port";
Blockly.Msg.SSERIAL_Write_tooltip = "Send data to the software port";
Blockly.Msg.SSERIAL_Read_tooltip = "returns the first byte of incoming data available in the software port, or -1 if no data is available";
Blockly.Msg.SSERIAL_Available = "amount of data on the software port";
Blockly.Msg.SSERIAL_Available_tooltip = "returns the number of available bytes in the software port queue, or 0 if nothing is available";
// storage
Blockly.Msg.STOCK1="store the data";
Blockly.Msg.STOCK2="at the address";
Blockly.Msg.STOCK_TOOLTIP="allows to write a data (8 bits or a byte) in the EEPROM, to the indicated address \nATmega328p and ATmega32u4 -> 1024 bytes \nATmega2560 -> 4096 bytes";
Blockly.Msg.STOCK3="data stored at the address";
Blockly.Msg.STOCK3_TOOLTIP="returns the data stored at the specified address (8 bits or one byte) \nATmega328p and ATmega32u4 -> 1024 bytes \nATmega2560 -> 4096 bytes";